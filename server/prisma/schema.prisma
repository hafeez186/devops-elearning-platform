// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments CourseEnrollment[]
  progress    LessonProgress[]
  comments    Comment[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  thumbnail   String?
  difficulty  String?
  duration    Int? // in minutes
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lessons     Lesson[]
  enrollments CourseEnrollment[]

  @@map("courses")
}

model Lesson {
  id          String      @id @default(cuid())
  title       String
  description String?
  content     String?
  videoUrl    String?
  order       Int
  duration    Int? // in minutes
  type        LessonType  @default(VIDEO)
  courseId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  course   Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress LessonProgress[]
  comments Comment[]

  @@map("lessons")
}

model CourseEnrollment {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime @default(now())
  completedAt  DateTime?
  progress     Float    @default(0) // percentage 0-100
  lastAccessed DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model LessonProgress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completed   Boolean  @default(false)
  timeSpent   Int      @default(0) // in seconds
  lastWatched Int      @default(0) // timestamp in video
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  lessonId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("comments")
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum LessonType {
  VIDEO
  TEXT
  LAB
  QUIZ
}
