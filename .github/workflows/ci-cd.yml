name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Code Quality & Security Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run Security Audit
      run: npm audit --audit-level moderate

  # Frontend Tests
  test-frontend:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Run Frontend Tests
      run: npm run test:client
      env:
        CI: true
    
    - name: Upload Frontend Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./client/coverage/lcov.info
        flags: frontend

  # Backend Tests
  test-backend:
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Run Backend Tests
      run: npm run test:server
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test
        JWT_SECRET: test-secret
    
    - name: Upload Backend Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: backend

  # Build Application
  build:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Build Frontend
      run: npm run build
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: client/build/

  # Docker Build & Push
  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./client
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/devops-elearning-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/devops-elearning-frontend:${{ github.sha }}
    
    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/devops-elearning-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/devops-elearning-backend:${{ github.sha }}

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment scripts here
        # Example: kubectl apply -f k8s/staging/
    
    - name: Run Integration Tests
      run: |
        echo "Running integration tests against staging..."
        # Add integration test commands here

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment scripts here
        # Example: kubectl apply -f k8s/production/
    
    - name: Health Check
      run: |
        echo "Performing health checks..."
        # Add health check commands here

  # Notify on Success/Failure
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
    - name: Notify Deployment Status
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "Deployment successful! ðŸš€"
        else
          echo "Deployment failed! ðŸ”¥"
        fi
