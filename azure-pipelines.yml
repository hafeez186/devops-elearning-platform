# Azure DevOps CI/CD Pipeline for DevOps E-Learning Platform
# Builds, tests, and deploys to Azure Container Apps

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - README.md
      - docs/*
      - '*.md'

variables:
  # Build Configuration
  buildConfiguration: 'Release'
  
  # Docker Configuration
  dockerRegistryServiceConnection: 'DockerHubConnection'
  imageRepository: 'hafeez654/devops-elearning'
  containerRegistry: 'docker.io'
  tag: '$(Build.BuildId)'
  
  # Azure Configuration
  azureSubscription: 'AzureServiceConnection'
  resourceGroupName: 'devops-elearning-rg'
  containerAppEnvironment: 'devops-elearning-env'

stages:
  - stage: Build
    displayName: 'Build and Test'
    jobs:
      - job: BuildFrontend
        displayName: 'Build Frontend'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'
          
          - script: |
              cd client
              npm ci
              npm run lint
              npm run test -- --coverage --watchAll=false --testResultsProcessor=jest-junit
              npm run build
            displayName: 'Frontend: Install, Lint, Test, Build'
            env:
              CI: true
          
          - task: PublishTestResults@1
            condition: succeededOrFailed()
            inputs:
              testRunner: JUnit
              testResultsFiles: 'client/junit.xml'
              testRunTitle: 'Frontend Tests'
          
          - task: Docker@2
            displayName: 'Build Frontend Docker Image'
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)-frontend'
              command: 'buildAndPush'
              Dockerfile: 'client/Dockerfile'
              tags: |
                $(tag)
                latest

      - job: BuildBackend
        displayName: 'Build Backend'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'
          
          - script: |
              cd server
              npm ci
              npm run lint
              npm run test -- --coverage --watchAll=false --testResultsProcessor=jest-junit
              npm run build
            displayName: 'Backend: Install, Lint, Test, Build'
            env:
              CI: true
          
          - task: PublishTestResults@1
            condition: succeededOrFailed()
            inputs:
              testRunner: JUnit
              testResultsFiles: 'server/junit.xml'
              testRunTitle: 'Backend Tests'
          
          - task: Docker@2
            displayName: 'Build Backend Docker Image'
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)-backend'
              command: 'buildAndPush'
              Dockerfile: 'server/Dockerfile'
              tags: |
                $(tag)
                latest

  - stage: SecurityScan
    displayName: 'Security Scanning'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: SecurityScan
        displayName: 'Security and Vulnerability Scanning'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'
          
          - script: |
              cd client
              npm audit --audit-level moderate || true
              cd ../server
              npm audit --audit-level moderate || true
            displayName: 'NPM Security Audit'

  - stage: DeployStaging
    displayName: 'Deploy to Staging'
    dependsOn: 
      - Build
      - SecurityScan
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: DeployToStaging
        displayName: 'Deploy to Azure Staging Environment'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'staging'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: 'Deploy to Azure Container Apps Staging'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Deploy Backend
                      az containerapp update \
                        --name devops-backend-staging \
                        --resource-group $(resourceGroupName) \
                        --image $(containerRegistry)/$(imageRepository)-backend:$(tag)
                      
                      # Deploy Frontend
                      az containerapp update \
                        --name devops-frontend-staging \
                        --resource-group $(resourceGroupName) \
                        --image $(containerRegistry)/$(imageRepository)-frontend:$(tag)

  - stage: DeployProduction
    displayName: 'Deploy to Production'
    dependsOn: 
      - Build
      - SecurityScan
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployToProduction
        displayName: 'Deploy to Azure Production Environment'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: 'Deploy Infrastructure and Applications'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Create or update Container Apps
                      az containerapp update \
                        --name devops-backend \
                        --resource-group $(resourceGroupName) \
                        --image $(containerRegistry)/$(imageRepository)-backend:$(tag) \
                        --env-vars NODE_ENV=production MONGODB_URI="$(MONGODB_URI)" JWT_SECRET="$(JWT_SECRET)"
                      
                      az containerapp update \
                        --name devops-frontend \
                        --resource-group $(resourceGroupName) \
                        --image $(containerRegistry)/$(imageRepository)-frontend:$(tag)

  - stage: PostDeployment
    displayName: 'Post-Deployment Testing'
    dependsOn: DeployProduction
    condition: succeeded()
    jobs:
      - job: HealthCheck
        displayName: 'Health Check and Integration Tests'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - script: |
              echo "üîç Running health checks..."
              # Wait for deployment to settle
              sleep 30
              
              # Health check for backend
              BACKEND_URL="https://devops-backend.proudsky-12345678.eastus.azurecontainerapps.io"
              curl -f "$BACKEND_URL/health" || exit 1
              
              echo "‚úÖ All services are healthy!"
            displayName: 'Application Health Check'
